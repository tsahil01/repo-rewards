// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  profile       Profile?
  userIssues    UserIssue[]
  digestSubscriptions DigestSubscription[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Business logic models for RepoRewards app

model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  primaryLanguages String[] // Array of programming languages
  topics          String[] // Array of topics of interest
  followedRepos   String[] // Array of "owner/repo" strings
  followedOrgs    String[] // Array of organization names
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("profile")
}

model Issue {
  id              String   @id @default(cuid())
  githubId        String   @unique // GitHub issue ID
  repoFullName    String   // "owner/repo"
  number          Int      // Issue number in repo
  title           String
  bodyExcerpt     String?  // Truncated body text
  htmlUrl         String   // GitHub issue URL
  labels          String[] // Array of label names
  language        String?  // Primary language of repo
  stars           Int      // Repository star count
  org             String?  // Organization name if applicable
  
  // Bounty-related fields
  isBounty        Boolean  @default(false)
  bountyType      String?  // "repo-label" | "link" | "platform"
  bountyUrl       String?  // URL to bounty page
  bountyAmountMin Int?     // Minimum bounty amount
  bountyAmountMax Int?     // Maximum bounty amount
  currency        String?  // Currency code (USD, EUR, etc.)
  
  // Timestamps
  openedAt        DateTime
  updatedAt       DateTime
  
  // Scoring
  score           Float    @default(0.0)
  
  // Relations
  userIssues      UserIssue[]
  
  @@map("issue")
}

model UserIssue {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  issueId   String
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  status    String   // "saved" | "started" | "done"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, issueId])
  @@map("user_issue")
}

model DigestSubscription {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  filters    Json     // JSON object with filter preferences
  frequency  String   @default("daily") // "daily"
  lastSentAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId])
  @@map("digest_subscription")
}

model EventLog {
  id        String   @id @default(cuid())
  source    String   // Source of the event (e.g., "ingestion", "webhook")
  payload   Json     // JSON payload with event data
  createdAt DateTime @default(now())

  @@map("event_log")
}
